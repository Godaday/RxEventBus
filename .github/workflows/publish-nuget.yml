# 工作流名称：发布 NuGet 包
# 描述：当检测到 Git 版本标签（如 v1.0.0）推送到远程仓库时，
#       此工作流将自动构建 .NET Core 项目，
#       从 Git 标签中提取版本号，
#       打包 NuGet 包，并将其发布到 NuGet.org。
name: Publish NuGet Package

# 触发条件：定义何时运行此工作流
on:
  push:
    # 仅当推送的是符合 'v*.*.*' 模式的 Git 标签时触发。
    tags:
      - 'v*.*.*' # 匹配类似 v1.0.0, v2.1.5 等标签

# 环境变量：定义在此工作流中可全局使用的变量
env:
  # 请仔细核对您的项目路径，确保是正确的 .csproj 文件路径
  PROJECT_PATH: 'RxEventBus/RxEventBus.Core/RxEventBus.Core.csproj'
  # 构建项目的配置（例如 'Release' 或 'Debug'）。
  BUILD_CONFIGURATION: 'Release' 

jobs:
  # 定义一个名为 'build_and_publish' 的作业
  build_and_publish:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器
    # 作业执行条件：仅当触发事件是标签推送，并且标签名以 'refs/tags/v' 开头时，才执行此作业。
    if: startsWith(github.ref, 'refs/tags/v')

    # 作业中的步骤：按顺序执行的任务列表
    steps:
    - name: Checkout repository # 步骤名称：检出代码
      uses: actions/checkout@v4 

    - name: Setup .NET SDK # 步骤名称：设置 .NET SDK 环境
      uses: actions/setup-dotnet@v4 
      with:
        dotnet-version: '8.0' # 指定要安装的 .NET SDK 版本。

    - name: Extract version from Git tag # 步骤名称：从 Git 标签中提取版本号
      id: get_version 
      run: |
        PACKAGE_VERSION=$(echo "${{ github.ref }}" | sed -n 's|^refs/tags/v\(.*\)$|\1|p')
        echo "Extracted package version: $PACKAGE_VERSION"
        echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> "$GITHUB_ENV"

    - name: Copy README.md to project directory # 新增步骤：复制 README.md 到项目目录
      run: |
        # 创建项目目录（如果不存在，以防万一）
        mkdir -p $(dirname ${{ env.PROJECT_PATH }})
        # 将仓库根目录的 README.md 复制到 .csproj 文件所在的目录
        cp README.md $(dirname ${{ env.PROJECT_PATH }})/README.md
        echo "README.md copied to: $(dirname ${{ env.PROJECT_PATH }})/README.md"
        # 验证文件是否存在（可选，用于调试）
        ls -l $(dirname ${{ env.PROJECT_PATH }})/README.md

    - name: Restore dependencies # 步骤名称：恢复项目依赖
      run: dotnet restore ${{ env.PROJECT_PATH }} 

    - name: Build project # 步骤名称：构建项目
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore 

    - name: Create NuGet package # 步骤名称：创建 NuGet 包，并使用提取的版本号
      # 注意：因为上一步已经将 README.md 复制到项目目录，
      # 所以 .csproj 中的 <None Include="README.md" Pack="true" PackagePath="\" /> 就能正确工作。
      run: dotnet pack ${{ env.PROJECT_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --output nupkgs -p:Version=${{ env.PACKAGE_VERSION }}

    - name: Publish NuGet package # 步骤名称：发布 NuGet 包到 NuGet.org
      run: dotnet nuget push nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json 
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}